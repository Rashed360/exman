generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//----> Auth Models <----//
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  fisrtName     String?
  lastName      String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  ledger        Ledger[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

//----> App Models <----//
model Ledger {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String

  type        Type    @default(EXP)
  amount      Float
  title       String
  description String?
  balance     Float?

  images Image[]
  tags   Tag[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Type {
  EXP
  INC
}

model Image {
  id       String @id @default(cuid())
  ledger   Ledger @relation(fields: [ledgerId], references: [id])
  ledgerId String
  url      String
}

model Tag {
  id       String @id @default(cuid())
  ledger   Ledger @relation(fields: [ledgerId], references: [id])
  ledgerId String
  title    String
}
